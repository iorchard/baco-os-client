#!/bin/bash
# baco client
set -e -o pipefail

execute_baco () {
    openstack "$@"
}
run_baco () {
    # check if client can reach each openstack service.
    declare -A clients
    clients=(
        ["cinder"]="300"
        ["glance"]="300"
        ["keystone"]="300"
        ["neutron"]="200"
        ["nova"]="200"
    )
    
    while true; do
        for c in ${!clients[@]}; do
            code=$(curl --silent --output /dev/null --head \
                    --max-time 3 --write-out "%{http_code}" \
                    http://$c.openstack.svc.cluster.local:8080/)
            if [ x"$code" != x"${clients[$c]}" ]; then
                echo "$c service has a problem."
            fi
        done
        sleep 30
    done
}
test_baco () {
    # Get cirros image first if not found.
    #v=$(curl -s http://download.cirros-cloud.net/version/released)
    #if [ ! -f /usr/local/bin/cirros-${v}-x86_64-disk.img ]; then
    #    curl -sLo /usr/local/bin/cirros-${v}-x86_64-disk.img \
    #        http://download.cirros-cloud.net/${v}/cirros-${v}-x86_64-disk.img
    #fi
    # Run baco-test.sh
    /usr/local/bin/baco-test.sh
}
version_baco () {
    declare -a clients
    clients=("cinder" "glance" "neutron" "nova" "openstack")
    header="%-10s\t%-10s"
    printf "$header\n" "Client" "Version"
    printf "=%.0s" {1..30}
    echo
    for c in ${clients[@]}; do
        printf "$header\n" "$c" "$($c --version 2>/dev/null)"
    done
}
USAGE () {
    echo "USAGE: $0 {-h|-e|-r|-t|-v}" 1>&2
    echo ""
    echo " -h --help        Display this help message."
    echo " -e --execute        Execute baco command."
    echo " -r --run            Run baco client."
    echo " -t --test           Run baco-test.sh script."
    echo " -v --version        Show openstack client versions."
}
if [ $# -lt 1 ]; then
    USAGE
    exit 0
fi

OPT=$1
shift
# Get argument
while true
do
    case "$OPT" in
        -e | --execute)
            execute_baco "$@"
            break
            ;;
        -h | --help)
            USAGE
            break
            ;;
        -r | --run)
            run_baco
            break
            ;;
        -t | --test)
            test_baco
            break
            ;;
        -v | --version)
            version_baco
            break
            ;;
        *)
            echo Error: unknown option: "$OPT" 1>&2
            echo " "
            USAGE
            break
            ;;
    esac
done
